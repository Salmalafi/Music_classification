pipeline {
    agent any

    environment {
        IMAGE_NAME_VGG19 = 'vgg19-service'
        IMAGE_NAME_SVM = 'svm-service'
        IMAGE_NAME_FRONTEND = 'frontend'
        DOCKER_REGISTRY = 'salmalafiii23'
        COMPOSE_FILE = 'docker-compose.yml'
        TEST_RESULTS_PATH = '/tests/junitResult.xml'  // Path inside container where test results will be saved
        LOCAL_TEST_RESULTS_PATH = 'tests/junitResult.xml' // Path in the Jenkins workspace where the result will be copied
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    cleanWs()  // Clean workspace before starting
                    checkout scm  // Checkout the code from SCM
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build images using docker-compose
                    sh "docker-compose -f ${COMPOSE_FILE} build"
                }
            }
        }

        stage('Install pytest in Docker') {
            steps {
                script {
                    // Ensure pytest is installed in the svm_service container
                    echo 'Installing pytest inside svm_service container...'
                    sh "docker exec -t svm_service pip3 install pytest"
                }
            }
        }

        stage('Test Docker Services') {
            steps {
                script {
                    try {
                        // Start services in detached mode
                        sh "docker-compose -f ${COMPOSE_FILE} up -d"

                        // Wait for services to be ready
                        sh 'sleep 20'

                        // Run tests for the SVM service using pytest inside the container
                        sh "docker exec -t svm_service pytest /tests --maxfail=1 --disable-warnings -q --junitxml=${TEST_RESULTS_PATH}"

                        // Debugging: Check if the file exists inside the container
                        sh 'docker exec -t svm_service ls -la /tests/'

                        // Copy the test results from the container to the Jenkins workspace
                        sh "docker cp svm_service:${TEST_RESULTS_PATH} ./${LOCAL_TEST_RESULTS_PATH}"

                    } catch (Exception e) {
                        echo "Error during testing: ${e}"
                        throw e
                    } finally {
                        // Cleanup: Stop services after tests
                        sh "docker-compose -f ${COMPOSE_FILE} down"
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    // Check if the test result file is available before publishing
                    if (fileExists(LOCAL_TEST_RESULTS_PATH)) {
                        // Publish the test results from the copied test results XML
                        junit allowEmptyResults: true, testResults: LOCAL_TEST_RESULTS_PATH
                    } else {
                        echo "Test result file not found: ${LOCAL_TEST_RESULTS_PATH}"
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    // Push Docker images to the registry
                    withDockerRegistry([credentialsId: 'docker-hub-credentials']) {
                        sh "docker push ${DOCKER_REGISTRY}/svm-service:latest"
                        sh "docker push ${DOCKER_REGISTRY}/vgg19-service:latest"
                        sh "docker push ${DOCKER_REGISTRY}/frontend:latest"
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Deploy the application using Docker Compose
                    sh "docker-compose -f ${COMPOSE_FILE} up -d"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
