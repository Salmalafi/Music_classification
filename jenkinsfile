pipeline {
    agent any

    environment {
        IMAGE_NAME_VGG19 = 'vgg19-service'
        IMAGE_NAME_SVM = 'svm-service'
        IMAGE_NAME_FRONTEND = 'frontend'
        DOCKER_REGISTRY = 'salmalafiii23'
        COMPOSE_FILE = 'docker-compose.yml'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    cleanWs()  // Clean workspace before starting
                    checkout scm  // Checkout the code from SCM
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build images using docker-compose
                    sh "docker-compose -f ${COMPOSE_FILE} build"
                }
            }
        }

        stage('Test Docker Services') {
            steps {
                script {
                    try {
                        // Start services in detached mode
                        sh "docker-compose -f ${COMPOSE_FILE} up -d"

                        // Wait for services to be ready
                        sh 'sleep 20'

                        // Debugging: Verify running containers
                        sh 'docker ps -a'

                        // Check logs of the svm_service container
                        sh 'docker logs svm_service'

                        // Check if the test directory exists inside the container
                        sh 'docker exec -t svm_service ls -la /tests'

                        // Print the working directory inside the container
                        sh 'docker exec -t svm_service pwd'

                        // Print the PYTHONPATH to check if the directories are correct
                        sh 'docker exec -t svm_service echo $PYTHONPATH'

                        // Ensure pytest is installed in the container
                        sh 'docker exec -t svm_service pip install pytest'

                        // Run tests for the SVM service using pytest
                        sh 'docker exec -t svm_service pytest /tests --maxfail=1 --disable-warnings -q --junitxml=/tests/svm_test_results.xml'

                        // Copy the test results from the container to the local workspace
                        sh 'docker cp svm_service:/tests/svm_test_results.xml ./svm_test_results.xml'

                    } catch (Exception e) {
                        echo "Error during testing: ${e}"
                        throw e
                    } finally {
                        // Cleanup: Stop services after tests
                        sh "docker-compose -f ${COMPOSE_FILE} down"
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    // Publish the test results from the copied test results XML
                    junit allowEmptyResults: true, testResults: 'svm_test_results.xml'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    // Push Docker images to the registry
                    withDockerRegistry([credentialsId: 'docker-hub-credentials']) {
                        sh "docker push ${DOCKER_REGISTRY}/svm-service:latest"
                        sh "docker push ${DOCKER_REGISTRY}/vgg19-service:latest"
                        sh "docker push ${DOCKER_REGISTRY}/frontend:latest"
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Deploy the application using Docker Compose
                    sh "docker-compose -f ${COMPOSE_FILE} up -d"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
