pipeline {
    agent any

    environment {
        IMAGE_NAME_VGG19 = 'vgg19-service'
        IMAGE_NAME_SVM = 'svm-service'
        IMAGE_NAME_FRONTEND = 'frontend'
        DOCKER_REGISTRY = 'salmalafiii23'
        COMPOSE_FILE = 'docker-compose.yml'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    cleanWs()
                    checkout scm
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh "docker-compose -f ${COMPOSE_FILE} build ${IMAGE_NAME_FRONTEND}"
                    sh "docker-compose -f ${COMPOSE_FILE} build ${IMAGE_NAME_VGG19}"
                    sh "docker-compose -f ${COMPOSE_FILE} build ${IMAGE_NAME_SVM}"
                }
            }
        }

        stage('Verify Built Images') {
            steps {
                script {
                    sh 'docker images'  // Check that images are built and tagged correctly
                }
            }
        }

        stage('Test Docker Services') {
            steps {
                script {
                    try {
                        sh "docker-compose -f ${COMPOSE_FILE} up -d"
                        sh 'sleep 20'
                        sh "docker ps -a"
                        sh "docker logs ${IMAGE_NAME_SVM}"
                        sh "docker exec -t ${IMAGE_NAME_SVM} ls -la /tests"
                        sh "docker exec -t ${IMAGE_NAME_SVM} pwd"
                        sh "docker exec -t ${IMAGE_NAME_SVM} echo \$PYTHONPATH"
                        sh "docker exec -t ${IMAGE_NAME_SVM} pip install pytest"
                        sh "docker exec -t ${IMAGE_NAME_SVM} pytest /tests --maxfail=1 --disable-warnings -q --junitxml=/tests/svm_test_results.xml"
                        sh "docker cp ${IMAGE_NAME_SVM}:/tests/svm_test_results.xml ./svm_test_results.xml"
                    } catch (Exception e) {
                        echo "Error during testing: ${e}"
                        throw e
                    } finally {
                        sh "docker-compose -f ${COMPOSE_FILE} down"
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    junit allowEmptyResults: true, testResults: 'svm_test_results.xml'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-hub-credentials']) {
                        sh "docker tag ${IMAGE_NAME_FRONTEND}:latest ${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:latest"

                        sh "docker tag ${IMAGE_NAME_VGG19}:latest ${DOCKER_REGISTRY}/${IMAGE_NAME_VGG19}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_VGG19}:latest"

                        sh "docker tag ${IMAGE_NAME_SVM}:latest ${DOCKER_REGISTRY}/${IMAGE_NAME_SVM}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_SVM}:latest"
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    sh "docker-compose -f ${COMPOSE_FILE} up -d"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
