pipeline {
    agent any

    environment {
        IMAGE_NAME_VGG19 = 'vgg19-service'
        IMAGE_NAME_SVM = 'svm-service'
        IMAGE_NAME_FRONTEND = 'frontend'
        DOCKER_REGISTRY = 'salmalafiii23'
        COMPOSE_FILE = 'docker-compose.yml'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    cleanWs()
                    checkout scm
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh 'docker-compose -f ${COMPOSE_FILE} build'
                }
            }
        }

        stage('Test Docker Services') {
            steps {
                script {
                    try {
                        // Start services
                        sh 'docker-compose -f ${COMPOSE_FILE} up -d'

                        // Wait for services to be ready
                        sh 'sleep 20'

                        // Optional: Verify running containers
                        sh 'docker ps -a'

                        // Debugging: Get logs of the svm_service container immediately
                        sh 'docker logs svm_service'

                        // Debugging steps: Check if the test directory exists inside the container
                        sh 'docker exec -t svm_service ls -la /svm_service/tests'

                        // Debug: Check the current working directory inside the container
                        sh 'docker exec -t svm_service pwd'

                        // Debug: Print the PYTHONPATH to check if the directories are correct
                        sh 'docker exec -t svm_service echo $PYTHONPATH'

                        // Run tests for SVM service
                        sh 'docker exec -t svm_service python -m unittest discover -s /app/tests'

                    } catch (Exception e) {
                        echo "Error during testing: ${e}"
                        throw e
                    } finally {
                        // Stop services after tests
                        sh 'docker-compose -f ${COMPOSE_FILE} down'
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    // Copy the test results from the container to the local workspace
                    sh 'docker cp svm_service:/svm_service/tests/svm_test_results.xml ./svm_test_results.xml'
                    // Publish the test results
                    junit allowEmptyResults: true, testResults: '**/*_test_results.xml'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-hub-credentials']) {
                        // Push Docker images to the registry
                        sh 'docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:latest'
                        sh 'docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_VGG19}:latest'
                        sh 'docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_SVM}:latest'
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Deploy the application using Docker Compose
                    sh 'docker-compose -f ${COMPOSE_FILE} up -d'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
