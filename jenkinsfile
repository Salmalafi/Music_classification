pipeline {
    agent any

    environment {
        IMAGE_NAME_VGG19 = 'vgg19-service'
        IMAGE_NAME_SVM = 'svm-service'
        IMAGE_NAME_FRONTEND = 'frontend'
        DOCKER_REGISTRY = 'salmalafiii23'
        COMPOSE_FILE = 'docker-compose.yml'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    // Clean the workspace
                    cleanWs()

                    // Clone the repository
                    checkout scm
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build Docker images using docker-compose
                    sh 'docker-compose -f ${COMPOSE_FILE} build'
                }
            }
        }

        stage('Test Docker Services') {
            steps {
                script {
                    try {
                        // Start services
                        sh 'docker-compose -f ${COMPOSE_FILE} up -d'

                        // Run tests for SVM service
                        sh 'docker exec -t svm_service python -m unittest discover -s svm_service/tests'

                    } finally {
                        // Stop services after tests
                        sh 'docker-compose -f ${COMPOSE_FILE} down'
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    // Copy test results for SVM service (adjust paths as needed)
                    sh 'docker cp svm_service:tests/svm_test_results.xml ./svm_test_results.xml'

                    // Publish test results in Jenkins
                    junit allowEmptyResults: true, testResults: '**/*_test_results.xml'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    // Push images to Docker Hub
                    withDockerRegistry([credentialsId: 'docker-hub-credentials']) {
                        sh 'docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_FRONTEND}:latest'
                        sh 'docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_VGG19}:latest'
                        sh 'docker push ${DOCKER_REGISTRY}/${IMAGE_NAME_SVM}:latest'
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Deploy services
                    sh 'docker-compose -f ${COMPOSE_FILE} up -d'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
